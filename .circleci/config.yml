# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

commands:
  destroy-environment:
    description: Destroy cloudformation stacks created by eksctl.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            eksctl delete cluster --region=$AWS_DEFAULT_REGION --name=eksctl-capstone
            

orbs:
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@0.12.0
  aws-cli: circleci/aws-cli@2.0.3

jobs:
  build_lint:
    docker:
      # Use the same Docker base as the project
      - image: python:3.7.3-stretch

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint 

  push_image:
    docker:
      - image: docker:17.05.0-ce-git

    working_directory: ~/repo

    steps:
      - checkout
      - setup_remote_docker

      # build docker image
      - run:
          name: build docker image
          command: |
            apk add --update docker
            docker build --tag=udacity_capstone .
            docker image ls

      - run:
          name: push docker image
          command: |
            echo "Docker ID and Image: $DOCKER_PATH"
            docker login --username=nitinbhagwat --password=$DOCKER_PASSWORD
            docker tag udacity_capstone $DOCKER_PATH:${CIRCLE_WORKFLOW_ID:0:7}
            docker push $DOCKER_PATH

  create_cluster:
    docker:
      - image: circleci/node:13.8.0

    steps:
      - checkout
      # - run:
      #     name: Install tar and gzip
      #     command: |
      #       apk add --update tar gzip nodejs npm curl  
      - run:
          name: install_awscli
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: install_aws_eks
          command: |
            mkdir -p src
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C src
            chmod +x src/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
                SUDO="sudo"
            fi
                $SUDO mv src/eksctl /usr/local/bin/
                rmdir src
      - run:
          name: install_kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --client
      - run:
          name: AWS EKS cluster creation
          command: |
            if eksctl create cluster --name eksctl-capstone --region=$AWS_DEFAULT_REGION --zones us-east-1a,us-east-1b,us-east-1c,us-east-1d 
            then
              aws eks update-kubeconfig --name eksctl-capstone --region=$AWS_DEFAULT_REGION
              # Deploy an App from the Dockerhub to the Kubernetes Cluster
              kubectl create deploy udacity-capstone --image=$DOCKER_PATH:${CIRCLE_WORKFLOW_ID:0:7}
              # See the status
              kubectl get deploy,rs,svc,pods,nodes
              POD=$(kubectl get pods|grep capstone|awk '{print $1}'|head -n 1)
              echo $POD
              sleep 1m
              kubectl get pods
              sleep 1m
              kubectl expose deployment udacity-capstone --type=LoadBalancer --port=80 --target-port=80
              # kubectl get pods
              # echo $POD
              # kubectl port-forward $POD --address 0.0.0.0 8000:80
              echo "kubectl getting deployments.."
              kubectl get deployments
            else
              echo "Stack already exists, updating it."
              aws eks update-kubeconfig --name eksctl-capstone --region=$AWS_DEFAULT_REGION
              kubectl get deploy,rs,svc,pods,nodes
              kubectl rollout restart udacity-capstone
              kubectl get deployments
            fi

      - destroy-environment

            
      # - run:
      #     name: AWS EKS get cluster creation
      #     command: |
      #       eksctl utils describe-stacks --region=us-east-1 --cluster=eksctl-capstone
      #       eksctl get cluster --name=eksctl-capstone --region=us-east-1
      # eksctl delete cluster --region=us-east-1 --name=eksctl-capstone

  # create_cluster:
  #   docker: 
  #     - image: amazon/aws-cli@2.0.3
  #   steps:  
  #     - run:
  #         name: create cluster using eksctl
  #         command: |
  #           eksctl create cluster --name eksctl-capstone --region=$AWS_DEFAULT_REGION --profile ${CIRCLE_WORKFLOW_ID:0:7}
            

workflows:
  capstone:
    jobs:
      - build_lint
      - push_image:
          requires: [build_lint]
      - create_cluster:
          requires: [push_image]
